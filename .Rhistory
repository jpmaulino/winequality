pred.df <- pred.df[1:3,] #take the k nearest neighbors
tab <- as.data.frame(table(pred.df)) #create table to get counts
for(x in nrow(tab)){
if(tab$Freq[x] == max(tab$Freq)){
pred <- c(pred, tab$c)
}
}
}
for(i in nrow(my.test)){
d <- c() #distance vector
c <- c() #class vector
for(j in nrow(my.data)){
d <- c(d, euc.dist(c(my.test[i,1],my.test[i,2]), c(my.data[j,1], my.data[j,2]))) #calculating all distances
c <- c(c, (my.data[j,3])) #adding each class
}
pred.df <- data.frame(d,c) #create prediction dataframe
pred.df <- pred.df[order(pred.df$d),] #order by distance
pred.df <- pred.df[1:3,] #take the k nearest neighbors
tab <- as.data.frame(table(pred.df)) #create table to get counts
for(x in nrow(tab)){
if(tab$Freq[x] == max(tab$Freq)){
pred <- c(pred, tab$c)
}
}
}
l.test <- c(3,3,10)
w.test <- c(1,1,10)
my.test <- data.frame(l.test,w.test)
my.data <- data.frame(l,w,colors)
my.data <- my.data[order(my.data$l),]
plot(my.data$l, my.data$w, col = colors, xlab = "Length", ylab = "Width", main = "Rectangles")
l <- c(5,3,1,3,2,6,8,9,10,7)
w <- c(3,3,2,1,2,4,7,6,5,5)
colors <- c("red", "red", "red","red", "red", "blue", "blue", "blue", "blue","blue")
my.data <- data.frame(l,w,colors)
my.data[1,3]
knn <- function(train, test, k){
pred <- c()
for(i in nrow(test)){
d <- c() #distance vector
c <- c() #class vector
for(j in nrow(train)){
d <- c(d, euc.dist(c(test[i,1],test[i,2]), c(train[j,1], train[j,2]))) #calculating all distances
c <- c(c, (train[j,3])) #adding each class
}
pred.df <- data.frame(d,c) #create prediction dataframe
pred.df <- pred.df[order(pred.df$d),] #order by distance
pred.df <- pred.df[1:k,] #take the k nearest neighbors
tab <- as.data.frame(table(pred.df)) #create table to get counts
for(x in nrow(tab)){
if(tab$Freq[x] == max(tab$Freq)){
pred <- c(pred, tab$c)
}
}
}
return(pred)
}
knn(my.data, my.test, 3)
euc.dist <- function(a,b){
d = 0
d = (a[1] - b[1])^2 + (a[2]-b[2])^2
d = sqrt(d)
return(d)
}
knn(my.data, my.test, 3)
knn(my.data, my.test, 3)
c <- c(c, as.character(train[j,3]) #adding each class
}
pred.df <- data.frame(d,c) #create prediction dataframe
pred.df <- pred.df[order(pred.df$d),] #order by distance
pred.df <- pred.df[1:k,] #take the k nearest neighbors
tab <- as.data.frame(table(pred.df)) #create table to get counts
for(x in nrow(tab)){
if(tab$Freq[x] == max(tab$Freq)){
pred <- c(pred, tab$c)
}
}
}
return(pred)
}
knn <- function(train, test, k){
pred <- c()
for(i in nrow(test)){
d <- c() #distance vector
c <- c() #class vector
for(j in nrow(train)){
d <- c(d, euc.dist(c(test[i,1],test[i,2]), c(train[j,1], train[j,2]))) #calculating all distances
c <- c(c, as.character(train[j,3])) #adding each class
}
pred.df <- data.frame(d,c) #create prediction dataframe
pred.df <- pred.df[order(pred.df$d),] #order by distance
pred.df <- pred.df[1:k,] #take the k nearest neighbors
tab <- as.data.frame(table(pred.df)) #create table to get counts
for(x in nrow(tab)){
if(tab$Freq[x] == max(tab$Freq)){
pred <- c(pred, tab$c)
}
}
}
return(pred)
}
knn(my.data, my.test, 3)
knn(my.data, my.test, 3)
knn <- function(train, test, k){
pred <- c()
for(i in nrow(test)){
d <- c() #distance vector
c <- c() #class vector
for(j in nrow(train)){
d <- c(d, euc.dist(c(test[i,1],test[i,2]), c(train[j,1], train[j,2]))) #calculating all distances
c <- c(c, as.character(train[j,3])) #adding each class
}
pred.df <- data.frame(d,c) #create prediction dataframe
pred.df <- pred.df[order(pred.df$d),] #order by distance
pred.df <- pred.df[1:k,] #take the k nearest neighbors
pred.df
tab <- as.data.frame(table(pred.df)) #create table to get frequency of each class
for(x in nrow(tab)){
if(tab$Freq[x] == max(tab$Freq)){
pred <- c(pred, tab$c)
}
}
}
return(pred)
}
knn(my.data, my.dest,3)
knn(my.data, my.test,3)
knn(my.data, my.test,3)
knn.test <- knn(my.data, my.test,3)
knn.test
knitr::opts_chunk$set(echo = TRUE)
sum(myAtomicVector > 0)
myAtomicVector <- c(1, 4, 3, 2, NA, 3.22, -44, 2, NA, 0, 22, 34)
sum(myAtomicVector > 0)
test <- c(1,1,1,1)
sum(test > 0)
myAtomicVector <- c(1, 4, 3, 2, NA, 3.22, -44, 2, NA, 0, 22, 34)
sum(test > 0)
sum(myAtomicVector > 0)
sum(myAtomicVector < 0)
```{r Q1}
myAtomicVector <- c(1, 4, 3, 2, NA, 3.22, -44, 2, NA, 0, 22, 34)
test <- c(1,1,1,1)
sum(myAtomicVector  > 0)
myAtomicVector <- c(1, 4, 3, 2, 3.22, -44, 2, 0, 22, 34)
sum(myAtomicVector  > 0)
myAtomicVector <- c(1, 4, 3, 2, 3.22, -44, 2, 0, 22, 34)
sum(myAtomicVector  > 0)
myAtomicVector <- c(1, 4, 3, 2, NA, 3.22, -44, NA, 2, 0, 22, 34)
sum(myAtomicVector  > 0)
sum(test  > 0)
test <- c(NA,NA,1)
sum(test  > 0)
myAtomicVector <- c(1, 4, 3, 2, NA, 3.22, -44, 2, NA, 0, 22, 34)
sum(myAtomicVector > 0, na.rm = TRUE)
sum(myAtomicVector < 0, na.rm = TRUE)
sum(myAtomicVector == 0, na.rm = TRUE)
sum(myAtomicVector == NA, na.rm = TRUE)
sum(myAtomicVector.isNA, na.rm = TRUE)
sum(myAtomicVector.is, na.rm = TRUE)
sum(myAtomicVector.isna, na.rm = TRUE)
sum(myAtomicVector == NA, na.rm = TRUE)
sum(is.na(myAtomicVector))
sum(myAtomicVector != 0, na.rm = TRUE)
sum(myAtomicVector[which>0], na.rm = TRUE)
test <- c(0,5,5,-1)
sum(test[which>0], na.rm = TRUE)
sum(myAtomicVector[myAtomicVector>0], na.rm = TRUE)
myAtomicVector <- c(1, 4, 3, 2, NA, 3.22, -44, 2, NA, 0, 22, 34)
sum(myAtomicVector[myAtomicVector>0], na.rm = TRUE)
sum(myAtomicVector[myAtomicVector < 0], na.rm = TRUE)
Fib.vec <- rep(0,1000)
Fib.vec <- rep(0,1000)
Fib.vec[2] <- 1
for(i in 3:1000){
Fib.vec[i] <- Fib.vec[i-1] + Fib.vec[i -2]
}
Fib.vec[1:8]
Fib.vec[0]
Fib.vec[1]
Fib.vec[1] <- 1
Fib.vec[2] <- 1
for(i in 3:1000){
Fib.vec[i] <- Fib.vec[i-1] + Fib.vec[i -2]
}
Fib.vec[1]
Fib.vec[1:8]
1000 - 8
Fib.vec[1000]
Fib.vec[1:8]
1000 - 8
Fib.vec[1:8]
Fib.vec[992:1000]
Fib.vec2 <- Fib.vec[2,1000]
Fib.vec2 <- Fib.vec[2:1000]
z <- (Fib.vec2 / Fib.vec)
z <- (Fib.vec2 / Fib.vec[1:999])
plot(z[1:10])
abline(h = (1 + sqrt(5))/2)
plot(z[1:10])
abline(h = (1 + sqrt(5))/2)
plot(z[1:10])
abline(a = (1 + sqrt(5))/2)
plot(z[1:10])
abline(h = (1 + sqrt(5))/2)
plot(z[1:10])
abline(h = (1 + sqrt(5))/2)
plot(z[1:30])
abline(h = (1 + sqrt(5))/2)
plot(z[1:10])
abline(h = (1 + sqrt(5))/2)
#(a)
Fib.vec <- rep(0,1000)
Fib.vec[1] <- 1
Fib.vec[2] <- 1
for(i in 3:1000){
Fib.vec[i] <- Fib.vec[i-1] + Fib.vec[i -2]
}
#(b)
Fib.vec[1:8]
Fib.vec[992:1000]
#(c)
Fib.vec2 <- Fib.vec[2:1000]
z <- (Fib.vec2 / Fib.vec[1:999])
#(d)
plot(z[1:10])
abline(h = (1 + sqrt(5))/2)
#(e)
As Zn got larger, it approached the Golden Ratio.
x <- Fib.vec(1:5)
Fib.col <- Fib.vec(1:100)
Fib.col <- Fib.vec[1:100]
Fib.col <- Fib.vec[1:100]
Fib.matrix1 <- matrix(c(Fib.vec, Fib.vec) nrow = 100, ncol = 2)
Fib.matrix1 <- matrix(c(Fib.vec, Fib.vec), nrow = 100, ncol = 2)
Fib.col <- Fib.vec[1:10]
Fib.matrix1 <- matrix(c(Fib.vec, Fib.vec), nrow = 10, ncol = 2)
Fib.matrix1
Fib.col <- Fib.vec[1:10]
Fib.matrix1 <- matrix(c(Fib.vec, Fib.vec), nrow = 10, ncol = 2)
Fib.matrix1
Fib.col <- Fib.vec[1:10]
Fib.matrix1 <- matrix(c(Fib.col, Fib.col), nrow = 10, ncol = 2)
Fib.matrix1
test <- rep(1, 10)
test
Fib.cols <- rep(Fib.col, 100)
Fib.matrix1 <- matrix(Fib.cols, nrow = 10, ncol = 2)
Fib.matrix1
Fib.col <- Fib.vec[1:100]
Fib.cols <- rep(Fib.col, 100)
Fib.matrix1 <- matrix(Fib.cols, nrow = 10, ncol = 2)
Fib.matrix1
Fib.col <- Fib.vec[1:100]
Fib.cols <- rep(Fib.col, 100)
Fib.matrix1 <- matrix(Fib.cols, nrow = 100, ncol = 10)
Fib.matrix1
Fib.col <- Fib.vec[1:100]
Fib.cols <- rep(Fib.col, 100)
Fib.matrix1 <- matrix(Fib.cols, nrow = 100, ncol = 10)
Fib.matrix1
Fib.matrix1 <- matrix(Fib.vec, nrow = 100, ncol = 10)
Fib.matrix1
? t()
Fib.matrix1 <- matrix(Fib.vec, nrow = 100, ncol = 10)
Fib.matrix1
Fib.matrix1
Fib.matrix2 <- t(Fib.matrix1)
Fib.matrix1 <- matrix(Fib.vec, nrow = 100, ncol = 10)
Fib.matrix2 <- t(Fib.matrix1)
Fib.matrix2
Fib.array <- (Fib.matrix1, dim = c(10,10,10))
Fib.array <- (Fib.matrix1, dim = c(10,10,10))
Fib.array <- (data=Fib.matrix1, dim = c(10,10,10))
Fib.array <- (data=Fib.matrix1, dim = (10,10,10))
Fib.array <- (data=Fib.matrix1, dim = (10,10,10))
Fib.array <- (data=Fib.matrix1, dim = c(10,10,10))
Fib.array <- (data=10, dim = c(10,10,10))
Fib.array <- (data=NA, dim = c(10,10,10))
Fib.array <- array(Fib.matrix1, dim=c(10,10,10))
Fib.array
Fib.vec[100]
Fib.array <- array(Fib.matrix1[1:100], dim=c(10,10,10))
Fib.array
mean(Fib.matrix1[18,])
sd(Fib.matrix2[,8])
sd(Fib.matrix2[,1])
sd(Fib.matrix2[,8])
? mean
Fib.array[8,5,2]
Fib.array[7,5,2]
Fib.array[5,2,8]
Fib.array[5,2,9]
Fib.array[5,2,8]
Fib.matrix1[5,2]
test <- Fib.matrix1[1:100]
test[5,2]
test[5]
test[5,2]
test
mean(Fib.matrix1[18,])
plot(z[1:10])
abline(h = (1 + sqrt(5))/2)
Fib.matrix1 <- matrix(Fib.vec, nrow = 100, ncol = 10)
Fib.matrix2 <- t(Fib.matrix1)
Fib.array <- array(Fib.matrix1[1:100], dim=c(10,10,10))
Fib.array[5,2,9]
Fib.array[5,2,10]
Fib.array[5,2,11]
Fib.array[5,2,8]
test <- matrix(Fib.matrix1[1:100], nrow=10, ncol=10)
test
test[5,2]
mean(Fib.matrix1[18,])
sd(Fib.matrix2[,8])
Fib.array[5,2,8]
knit_with_parameters('C:/Users/Jordan/Desktop/Spring2017/BSDS100/Assignment4_AnswerKey.Rmd')
knitr::opts_chunk$set(echo = TRUE)
Numbers = rep(1:50, each = 2)
Numbers
Numbers = c(rep(1:50, each = 2))
Numbers
numbers2 = rep(1:50, each = 2)
type(numbers2)
numbers2.type
typeof(numbers2)
typeof(Numbers)
Logicals = c(rep(1:50, each = 2) %% 2 ==0)
Rev.Numbers = rev(Numbers)
Rev.Numbers
Weirdness = sum(Logicals, Rev.Numbers)
Weirdness
Weirdness = Logicals + Rev.Numbers
Weirdness
df = data.frame(Numbers, Logicals, Rev.Numbers, Weirdness)
View(df)
typeof(df)
typeof(df$Numbers)
typeof(df$Logicals)
typeof(df$Rev.Numbers)
typeof(df$Weirdness)
View(df)
View(df)
rm(df)
MyDataFrame = load("/Users/Jordan/Desktop/Spring2017/BSDS100/Assignment6/MyDataFrame.RData")
knitr::opts_chunk$set(echo = TRUE)
df = data.frame(Numbers, Logicals, Rev.Numbers, Weirdness)
save(df,file= "/Users/Jordan/Desktop/Sprin2017/BSDS100/Assignment6/MyDataFrame.RData")
save(df,file= "/Users/Jordan/Desktop/Spring2017/BSDS100/Assignment6/MyDataFrame.RData")
rm(df)
load("/Users/Jordan/Desktop/Spring2017/BSDS100/Assignment6/MyDataFrame.RData")
airports = read.table(file = "https://raw.githubusercontent.com/jdwilson4/Intro-Data-Science-2017/master/Data/airports.csv", header = FALSE, sep = ",")
colnames(airports)
View(airports)
View(airports)
airports = read.table(file = "https://raw.githubusercontent.com/jdwilson4/Intro-Data-Science-2017/master/Data/airports.csv",sep = ",")
View(airports)
View(airports)
airports = read.table(file = "https://raw.githubusercontent.com/jdwilson4/Intro-Data-Science-2017/master/Data/airports.csv", header = TRUE,sep = ",")
View(airports)
View(airports)
colnames(airports)
typeof(airports$iata)
typeof(airports$airport)
typeof(airports$city)
typeof(airports$state)
typeof(airports$country)
typeof(airports$lat)
typeof(airports$long)
airports[which.min(abs(longitude - mean(longitude))), ]
airports[which.min(abs(long - mean(long))), ]
airports[which.min(abs(airports$long - mean(airports$long))), ]
airports[which.min(abs(airports$long - mean(airports$long))), ]
city <- airports[which.min(abs(airports$long - mean(airports$long))), ]
city
print(airports[which.min(abs(airports$long - mean(airports$long))), ])
airports[which.min(abs(airports$long - mean(airports$long))), ]
print(airports[which.min(abs(airports$long - mean(airports$long))), ])
min(airports$lat)
max(airports$lat)
which.min(latitude),
which.min(latitude), ]
airports[which.min(airports$lat), ]
print(airports[which.min(airports$lat), ])
print(airports[which.max(airports$lat), ])
airports[which.min(airports$lat), ]
airports[which.min(airports$lat), ]
airports[which.max(airports$lat), ]
typeof(airports$iata)
typeof(airports$airport)
typeof(airports$city)
typeof(airports$state)
typeof(airports$country)
typeof(airports$lat)
typeof(airports$long)
print(airports[which.min(abs(airports$long - mean(airports$long))), ])
typeof(airports$city)
test <- double(123.213)
typeof(test)
test <- 1231.12312
typeof(test)
airports <- rbind(airports, c(iata = strtoi("LOL"), airport = strtoi("AirportName"), city = strtoi("SF"), state = strtoi("CA"), country = strtoi("USA"), lat = double(4.2), long = double(54.7))
airports <- rbind(airports, c(iata = strtoi("LOL"), airport = strtoi("AirportName"), city = strtoi("SF"), state = strtoi("CA"), country = strtoi("USA"), lat = double(4.2), long = double(54.7)))
airports <- rbind(airports, c(iata = strtoi("LOL"), airport = strtoi("AirportName"), city = strtoi("SF"), state = strtoi("CA"), country = strtoi("USA"), lat = double(4.2), long = double(54.7)))
View(airports)
View(airports)
airports <- rbind(airports, c(iata = strtoi("LOL"), airport = strtoi("AirportName"), city = strtoi("SF"), state = strtoi("CA"), country = strtoi("USA"), lat = double(4.2), long = double(54.7)))
View(airports)
View(airports)
airports <- rbind(airports, c(iata = strtoi("LOL"), airport = strtoi("AirportName"), city = strtoi("SF"), state = strtoi("CA"), country = strtoi("USA"), lat = double(4.2), long = double(54.7)))
airports <- rbind(airports, c(iata = strtoi("LOL"), airport = strtoi("AirportName"), city = strtoi("SF"), state = strtoi("CA"), country = strtoi("USA"), lat = double(4.2), long = double(54.7)))
airports <- rbind(airports, c(iata = strtoi("LOL"), airport = strtoi("AirportName"), city = strtoi("SF"), state = strtoi("CA"), country = strtoi("USA"), lat = double(4.2), long = double(54.7)))
airports <- rbind(airports, c(iata = strtoi("LOL"), airport = strtoi("AirportName"), city = strtoi("SF"), state = strtoi("CA"), country = strtoi("USA"), lat = double(4.2), long = double(54.7)))
View(airports)
View(airports)
airports <- rbind(airports, c(iata = "LOL", airport = strtoi("AirportName"), city = strtoi("SF"), state = strtoi("CA"), country = strtoi("USA"), lat = double(4.2), long = double(54.7)))
rm(airports)
airports = read.table(file = "https://raw.githubusercontent.com/jdwilson4/Intro-Data-Science-2017/master/Data/airports.csv", header = TRUE,sep = ",")
colnames(airports)
typeof(airports$iata)
typeof(airports$airport)
typeof(airports$state)
typeof(airports$lat)
typeof(airports$long)
new.row <- data.frame(iata = strtoi("LOL"), airport = strtoi("Airport Name"), city = strtoi("SF"), state = strtoi("CA"), country = strtoi("USA"), lat = double(1232.12312), long = double(312321.312321))
new.row <- data.frame(iata = strtoi("LOL"), airport = strtoi("Airport Name"), city = strtoi("SF"), state = strtoi("CA"), country = strtoi("USA"), lat = 1232.12312, long = 312321.312321)
View(new.row)
View(new.row)
new.row <- data.frame(iata = "LOL", airport = strtoi("Airport Name"), city = strtoi("SF"), state = strtoi("CA"), country = strtoi("USA"), lat = 1232.12312, long = 312321.312321)
typof(new.row$iata)
typeof(new.row$iata)
typeof(new.row$airport)
typeof(new.row$long)
typeof(new.row$lat)
airports <- rbind(airpots, new.row)
airports <- rbind(airports, new.row)
new.row <- data.frame(iata = "LOL", airport = "Airport Name", city ="SF", state = "CA", country = "USA", lat = 1232.12312, long = 312321.312321)
rm(airports)
airports = read.table(file = "https://raw.githubusercontent.com/jdwilson4/Intro-Data-Science-2017/master/Data/airports.csv", header = TRUE,sep = ",")
s
airports <- rbind(airports, new.row)
str(airports)
ggplot(data = mpg, mapping = aes(x = displ, y = hwy, color = drv)) +
geom_point() +
geom_smooth(se = FALSE)
library("ggplot")
library("ggplot2")
ggplot(data = mpg, mapping = aes(x = displ, y = hwy, color = drv)) +
geom_point() +
geom_smooth(se = FALSE)
ggplot(data = mpg, mapping = aes(x = displ, y = hwy, color = drv)) +
geom_point() +
geom_smooth(se = FALSE)
ggplot(data = mpg, mapping = aes(x = displ, y = hwy, color = drv)) +
geom_point() +
geom_smooth(se = FALSE)
ggplot(data = mpg, mapping = aes(x = displ, y = hwy)) +
geom_point() +
geom_smooth(se = FALSE)
ggplot(data = mpg, mapping = aes(x = displ, y = hwy)) +
geom_smooth(aes(group = drv), se = FALSE) +
geom_point()
ggplot(data = mpg, mapping = aes(x = displ, y = hwy, color = drv)) +
geom_point() +
geom_smooth(se = FALSE)
ggplot(data = mpg, mapping = aes(x = displ, y = hwy)) +
geom_point(aes(color = drv)) +
geom_smooth(se = FALSE)
ggplot(data = mpg, mapping = aes(x = displ, y = hwy)) +
geom_point(aes(color = drv)) +
geom_smooth(aes(linetype = drv), se = FALSE)
ggplot(data = mpg, mapping = aes(x = displ, y = hwy)) +
geom_point(size = 4, colour = "white") +
geom_point(aes(colour = drv))
ggplot(data = mpg, mapping = aes(x = cty, y = hwy)) +
geom_point()
ggplot(data = mpg, mapping = aes(x = factor(1), fill = class)) +
geom_bar(width = 1) +
coord_polar(theta = "y")
? labs()
? labs()
ggplot(data = mpg, mapping = aes(x = cty, y = hwy)) +
geom_point() +
geom_abline() +
coord_fixed()
fileEncoding="UTF-8-BOM"
unlink('C:/Users/Jordan/Desktop/Spring2017/BSDS100/Assignment8_AnswerKey_cache', recursive = TRUE)
stacked.bar <- ggplot(data = diamonds) +
geom_bar(mapping = aes(x = cut, fill = clarity))
stacked.bar + coord_polar()
setwd("C:/Users/Jordan/Desktop/Sideprojects/winequality")
library(corrplot)
wines <- read.csv("winequality-red.csv")
summary(wines)
hist(wines$quality)
plot(wines)
plot(quality ~ alcohol, wines)
plot(quality ~ residual.sugar, wines)
corrplot(cor(wines))
set.seed(1)
size <- floor(nrow(wines) * .75)
samples <- sample(nrow(wines), size)
train <- wines[samples,]
test <- wines[-samples,]
fit.full <- lm(quality ~., wines)
summary(fit.full)
fit.reduced <- lm(quality ~ volatile.acidity + chlorides + total.sulfur.dioxide + sulphates + alcohol, wines)
summary(fit.reduced)
summary(fit.full)
summary(fit.reduced)
summary(fit.full)
summary(fit.reduced)
